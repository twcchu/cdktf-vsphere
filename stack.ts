import { TerraformStack } from 'cdktf';
import { Construct } from 'constructs';

/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as vsphere from './.gen/providers/vsphere';

interface cdktfVsphereProps {
  user: string,
  password: string,
  datacenter: string,
  datastoreCluster: string,
  network: string,
  rp_name: string,
  template: string,
  vm_name: string,
  disks: vsphere.VirtualMachineDisk[],
  cdktf_options?: cdktfVsphereOptions,
};

interface cdktfVsphereOptions {
  tfcloud_workspace?: string,
};

export class MyStack extends TerraformStack {
  constructor(scope: Construct, name: string, props: cdktfVsphereProps) {
    super(scope, name);

    // define resources here
    new vsphere.VsphereProvider(this, 'vsphere', {
      allowUnverifiedSsl: true,
      user: props.user,
      password: props.password,
      vsphereServer: 'vcenter.lab1.bwnet.us',
    });

    const datacenter = new vsphere.DataVsphereDatacenter(
      this,
      'datacenter',
      {
        name: props.datacenter,
      },
    );

    const datastoreCluster =
      new vsphere.DataVsphereDatastoreCluster(this, 'datastore', {
        datacenterId: datacenter.id,
        name: props.datastoreCluster,
      });

    const network = new vsphere.DataVsphereNetwork(this, 'network', {
      datacenterId: datacenter.id,
      name: props.network,
    });

    const resourcepool = new vsphere.DataVsphereResourcePool(this, 'pool', {
      datacenterId: datacenter.id,
      name: props.rp_name,
    });

    const template_vm = new vsphere.DataVsphereVirtualMachine(this, 'template_vm', {
      name: props.template,
      datacenterId: datacenter.id,
    });

    new vsphere.VirtualMachine(this, 'vm', {
      datastoreClusterId: datastoreCluster.id,
      disk: props.disks,
      guestId: template_vm.guestId,
      name: props.vm_name,
      networkInterface: [
        {
          networkId: network.id,
        },
      ],
      waitForGuestNetTimeout: 0,
      resourcePoolId: resourcepool.id,
      clone: {
        templateUuid: template_vm.id,
      },
    });

    // new RemoteBackend(this, {
    //   hostname: "app.terraform.io",
    //   organization: "bw-systems",
    //   workspaces: {
    //     name: props.cdktf_options?.tfcloud_workspace
    //   },
    // });
  }
}

